// Mocks generated by Mockito 5.3.2 from annotations
// in hotel_management_system/test/hotel_management_system_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:hotel_management_system/entity/guest.dart' as _i5;
import 'package:hotel_management_system/entity/key_card.dart' as _i3;
import 'package:hotel_management_system/entity/room.dart' as _i4;
import 'package:hotel_management_system/repository/booking_data_repository.dart'
    as _i2;
import 'package:hotel_management_system/repository/booking_repository.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tuple/tuple.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookingDataRepository_0 extends _i1.SmartFake
    implements _i2.BookingDataRepository {
  _FakeBookingDataRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeyCard_1 extends _i1.SmartFake implements _i3.KeyCard {
  _FakeKeyCard_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRoom_2 extends _i1.SmartFake implements _i4.Room {
  _FakeRoom_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGuest_3 extends _i1.SmartFake implements _i5.Guest {
  _FakeGuest_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTuple2_4<T1, T2> extends _i1.SmartFake
    implements _i6.Tuple2<T1, T2> {
  _FakeTuple2_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingRepository extends _i1.Mock implements _i7.BookingRepository {
  MockBookingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookingDataRepository get dataRepository => (super.noSuchMethod(
        Invocation.getter(#dataRepository),
        returnValue: _FakeBookingDataRepository_0(
          this,
          Invocation.getter(#dataRepository),
        ),
      ) as _i2.BookingDataRepository);
  @override
  _i8.Future<void> createRoom(List<_i4.Room>? rooms) => (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [rooms],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> createKeyCard(List<_i3.KeyCard>? keyCards) =>
      (super.noSuchMethod(
        Invocation.method(
          #createKeyCard,
          [keyCards],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<_i3.KeyCard> checkIn(
    String? guestName,
    int? age,
    String? roomName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIn,
          [
            guestName,
            age,
            roomName,
          ],
        ),
        returnValue: _i8.Future<_i3.KeyCard>.value(_FakeKeyCard_1(
          this,
          Invocation.method(
            #checkIn,
            [
              guestName,
              age,
              roomName,
            ],
          ),
        )),
      ) as _i8.Future<_i3.KeyCard>);
  @override
  _i8.Future<_i4.Room> checkOut(
    String? guestName,
    String? keyCardName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkOut,
          [
            guestName,
            keyCardName,
          ],
        ),
        returnValue: _i8.Future<_i4.Room>.value(_FakeRoom_2(
          this,
          Invocation.method(
            #checkOut,
            [
              guestName,
              keyCardName,
            ],
          ),
        )),
      ) as _i8.Future<_i4.Room>);
  @override
  _i8.Future<List<_i4.Room>> getAvailableRoom() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableRoom,
          [],
        ),
        returnValue: _i8.Future<List<_i4.Room>>.value(<_i4.Room>[]),
      ) as _i8.Future<List<_i4.Room>>);
  @override
  _i8.Future<List<_i5.Guest>> getAllGuest() => (super.noSuchMethod(
        Invocation.method(
          #getAllGuest,
          [],
        ),
        returnValue: _i8.Future<List<_i5.Guest>>.value(<_i5.Guest>[]),
      ) as _i8.Future<List<_i5.Guest>>);
  @override
  _i8.Future<List<_i5.Guest>> getAllGuestAgeLessThan(int? age) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGuestAgeLessThan,
          [age],
        ),
        returnValue: _i8.Future<List<_i5.Guest>>.value(<_i5.Guest>[]),
      ) as _i8.Future<List<_i5.Guest>>);
  @override
  _i8.Future<List<_i5.Guest>> getAllGuestAgeGreaterThan(int? age) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGuestAgeGreaterThan,
          [age],
        ),
        returnValue: _i8.Future<List<_i5.Guest>>.value(<_i5.Guest>[]),
      ) as _i8.Future<List<_i5.Guest>>);
  @override
  _i8.Future<List<_i5.Guest>> getAllGuestAgeEqualTo(int? age) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGuestAgeEqualTo,
          [age],
        ),
        returnValue: _i8.Future<List<_i5.Guest>>.value(<_i5.Guest>[]),
      ) as _i8.Future<List<_i5.Guest>>);
  @override
  _i8.Future<List<_i5.Guest>> getAllGuestByFloor(String? floor) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllGuestByFloor,
          [floor],
        ),
        returnValue: _i8.Future<List<_i5.Guest>>.value(<_i5.Guest>[]),
      ) as _i8.Future<List<_i5.Guest>>);
  @override
  _i8.Future<_i5.Guest> getGuestByRoom(String? roomName) => (super.noSuchMethod(
        Invocation.method(
          #getGuestByRoom,
          [roomName],
        ),
        returnValue: _i8.Future<_i5.Guest>.value(_FakeGuest_3(
          this,
          Invocation.method(
            #getGuestByRoom,
            [roomName],
          ),
        )),
      ) as _i8.Future<_i5.Guest>);
  @override
  _i8.Future<List<_i4.Room>> checkOutByFloor(String? floor) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkOutByFloor,
          [floor],
        ),
        returnValue: _i8.Future<List<_i4.Room>>.value(<_i4.Room>[]),
      ) as _i8.Future<List<_i4.Room>>);
  @override
  _i8.Future<_i6.Tuple2<List<_i3.KeyCard>, List<_i4.Room>>> checkInByFloor(
    String? floor,
    String? guestName,
    int? age,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkInByFloor,
          [
            floor,
            guestName,
            age,
          ],
        ),
        returnValue:
            _i8.Future<_i6.Tuple2<List<_i3.KeyCard>, List<_i4.Room>>>.value(
                _FakeTuple2_4<List<_i3.KeyCard>, List<_i4.Room>>(
          this,
          Invocation.method(
            #checkInByFloor,
            [
              floor,
              guestName,
              age,
            ],
          ),
        )),
      ) as _i8.Future<_i6.Tuple2<List<_i3.KeyCard>, List<_i4.Room>>>);
  @override
  _i8.Future<void> clearData() => (super.noSuchMethod(
        Invocation.method(
          #clearData,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
